class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        // LET'S TRY DP NOW
        int m=grid.length;
        int n=grid[0].length;
        int[][]  dp=new int[m][n];
        for(int j=0;j<n;j++)
            dp[0][j]=grid[0][j];
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                int mincostpath=Integer.MAX_VALUE;
                for(int prevrow=0;prevrow<n;prevrow++)
                    mincostpath=Math.min(mincostpath,dp[i-1][prevrow]+moveCost[(grid[i-1][prevrow])][j]);
                dp[i][j]=mincostpath+grid[i][j];
            }
        }
        int min=Integer.MAX_VALUE;
        for(int minpath:dp[m-1])
            min=Math.min(min,minpath);
        return min;
    }
}
        
        
//         //MY MASTERCLASS DONE BY ME WORKING RECURSIVE APPROACH BUT TLE:
    
//         int minpath=Integer.MAX_VALUE;
//         for(int i=0;i<grid[0].length;i++)
//         minpath=Math.min(minpath,f(grid.length-1,i,grid,moveCost));
//         // minpath=f(grid.length-1,1,grid,moveCost);
//         return minpath;
//     }
//     public int f(int row, int col, int[][] grid, int[][] moveCost){ //f will denote the minimum path sum for reaching (row,col). and we'll check ki last row k jis bhi col se move krke (row,col) aake least pathsum hoga usiko lenge
//         if(row==0){
//             return grid[0][col];
//         }
//         int mincostpath=Integer.MAX_VALUE;
//         for(int j=0;j<grid[0].length;j++){  //checking which column in the previous row is the best to move from, to here(row,col)
//             mincostpath=Math.min(mincostpath,f(row-1,j,grid,moveCost)+moveCost[(grid[row-1][j])][col]);
//                                  }
//         return mincostpath+grid[row][col];
                                 
//     }
// }
//         // dysfunctional recursive solution
// //         return f(grid.length-1,grid,moveCost);
// //     }
// //     public int f(int row, int[][] grid, int[][] moveCost){
// //         if(row==0){
// //             int max=101;
// //             for(int i:grid[0])                
// //                 max=Math.max(max,i);
// //             return max;
// //         }
// //         int mincostpath=0;
// //         for(int i=0;i<grid[0].length;i++){
// //             mincostpath=Math.min(mincostpath,f(row-1,grid,moveCost));
// //             mincostpath+=moveCost[lastrowval][thisrowindex];
// //         }
        
// //     }
// // }