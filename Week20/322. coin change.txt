class Solution {
    public int coinChange(int[] coins, int amount) {
        // EASY 1D APPROACH link of which: 
        int[] dp=new int[amount+1];
        dp[0]=0;
        for(int i=1;i<=amount;i++){
            // dp[i]=Integer.MAX_VALUE;
            dp[i]=amount+1;
            for(int coin:coins){
                if(i-coin>=0)
                    dp[i]=Math.min(dp[i],1+dp[i-coin]);
            }
        }
        return (dp[amount]==amount+1?-1:dp[amount]);
    }
}
        
        
        // MY HIT AND TRIAL DP ANSWER WITH A LOT OF HARDWORK:
        
//         int[][] dp=new int[amount+1][coins.length]; //dp[coinsidx][amt] will denote the fewest no. of coins needed to make up that amount if we use coins[coinsidx] at amount and make it amount-coins[coinsidx]
//         for(int i=0;i<=amount;i++){
//             for(int j=0;j<coins.length;j++){
//                 if(i==0)
//                     dp[i][j]=0;
//                 // int residue=amount-coins[j];
//                 else if(i-coins[j]==0)
//                     dp[i][j]=1;
//                 else if(i-coins[j]<0)
//                     dp[i][j]=-1;
//                 else{
//                     int prevleast=Integer.MAX_VALUE;
//                     int residue=i-coins[j];
//                     boolean viable=false;
//                     for(int k=0;k<coins.length;k++){
//                         if(dp[residue][k]!=-1){
//                             prevleast=Math.min(prevleast,dp[residue][k]);
//                             viable=true;
//                         }
//                     }
//                     if(!viable)
//                         dp[i][j]=-1;
//                     else
//                         dp[i][j]=prevleast+1;
//                 }
//             }
//         }
//         int leastcoins=Integer.MAX_VALUE;
//         boolean solutionexists=false;
//         for(int i:dp[amount]){
//             if(i!=-1){  // we don't want leastcoins to simply pick -1 when it actually means that there isnt a viable solution at that place, since -1 is lesser than any +ve integer
//                 leastcoins=Math.min(leastcoins,i);
//                 solutionexists=true;
//             }
//         }
//         if(!solutionexists) //if there's no coin picking which we can make up amount, return -1.
//             return -1;
//         return leastcoins;
//     }
// }