class Solution {
    public int countElements(int[] nums) {
        Arrays.sort(nums);
        //vaise to nums.length-2 return kr skte the agar all elements were distinct. But they're not. which means we've to find out how many duplicates in the beginning as well as end of the array
        int lo=nums[0],l=1;
        for(int i=1;i<nums.length;i++)
            l=(nums[i]==lo?l+1:l);
        int hi=nums[nums.length-1],r=1;
        for(int i=nums.length-2;i>=0;i--)
            r=(nums[i]==hi?r+1:r);
        
        if(l+r+1>nums.length) //basically we've dealt with edge cases like [0] or [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]. how? well left duplicates+right duplicates should still leave one place in the middle so that a beech ka distinct number can take place. if it doesn't have that space return 0.
            return 0;
        return nums.length-l-r;
    }
}