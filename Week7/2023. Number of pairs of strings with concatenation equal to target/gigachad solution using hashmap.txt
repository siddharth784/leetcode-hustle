Create a hash table to keep the counts of each substring and then calculate the ans by checking whether the susbtring before the partition and substring after partition equal the target and both exist in the map with the partition passing linearly through the target.

class Solution {
    public int numOfPairs(String[] nums, String target) {
        
        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i<nums.length; i++){
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
        }
        
        int ans = 0;
        for (int i = 1; i<target.length(); i++){
            String a = target.substring(0,i);
            String b = target.substring(i,n);
            if (map.containsKey(a) && map.containsKey(b)){
                if (a.equals(b)) 
                	ans += (map.get(a) * (map.get(a)-1));
                else 
			ans+= (map.get(a) * map.get(b));
            }
        }
        return ans;
    }
}