/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        // int levels=height(root);
//         int maxsum=Integer.MIN_VALUE;
//         for(int i=1;i<=height(root);i++){
            
//         }
        int maxsum=Integer.MIN_VALUE;
        int maxsumlevel=0;
        Queue<TreeNode> q=new ArrayDeque<>();
        q.add(root);
        int level=1;
        while(q.isEmpty()==false){
            int count=q.size();
            int temp=0;
            for(int i=0;i<count;i++){
                TreeNode node=q.remove();
                if(node.left!=null)
                    q.add(node.left);
                if(node.right!=null)
                    q.add(node.right);
                temp+=node.val;
            }
            if(temp>maxsum){
                maxsumlevel=level;
                maxsum=temp;
            }
            level++;
        }
        return maxsumlevel;
    }
    // public int height(TreeNode root){
    //     if(root==null)
    //         return 0;
    //     int lheight=height(root.left);
    //     int rheight=height(root.right);
    //     return (1+Math.max(lheight,rheight));
    // }
}