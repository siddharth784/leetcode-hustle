class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(o1,o2)->o1[0]-o2[0]); //sort the intervals based on their start times, using lambda function
        ArrayList<int[]> ans=new ArrayList<>();
        int start=intervals[0][0],end=intervals[0][1];  //initial range/interval
        int i=1;
        while(i<intervals.length){
            int s=intervals[i][0];
            int e=intervals[i][1];
            if(s<=end)
                end=Math.max(end,e);//you would think that it should be end=e; but that's wrong for that cases where the previous end exceeded e. e.g.[[1,4],[2,3]].
            else{
                ans.add(new int[]{start,end});
                start=s;
                end=e;
            }
            i++;
        }
        ans.add(new int[]{start,end});
        int[][] arr=new int[ans.size()][2];
        for(int k=0;k<ans.size();k++){
            arr[k][0]=ans.get(k)[0];
            arr[k][1]=ans.get(k)[1];
        }
        return arr;
    }
}
        