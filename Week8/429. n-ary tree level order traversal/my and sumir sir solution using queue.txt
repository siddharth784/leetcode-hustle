/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
// rpa: print remove add
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        if(root==null)
            return new ArrayList<>();
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        Queue<Node> q=new ArrayDeque<>();
        q.add(root);
        while(q.isEmpty()==false){
            int count=q.size();
            List<Integer> li=new ArrayList<>();
            for(int i=0;i<count;i++){
                Node hold=q.remove();
                li.add(hold.val);
                for(Node child:hold.children)
                    q.add(child);
            }
            ans.add(li);
        }
        return ans;
    }
}