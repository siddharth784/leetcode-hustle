/*I DID THIS QUESTION USING BOTH ARRAYLIST(HAVE COMMENTED THE ARRAYLIST SOLUTION) AND ARRAY ITSELF. ARRAY RAN FASTER FOR SOME REASON. NONETHELESS BOTH WORK.*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // public TreeNode construct(ArrayList<Integer> al, int lo, int hi){
    //     if(lo>hi)
    //         return null;
    //     int mid=(lo+hi)/2;
    //     TreeNode node=new TreeNode(al.get(mid),construct(al,lo,mid-1),construct(al,mid+1,hi));
    //     return node;
    // }
    public TreeNode sortedListToBST(ListNode head) {
        // int idx=0;
//         ArrayList<Integer> al=new ArrayList<>();
//         for(var p=head;p!=null;p=p.next)
//             al.add(p.val);
//         return construct(al,0,al.size()-1);
//     }
// }
        int size=0;
        for(var p=head;p!=null;p=p.next)
            size++;
        int[] arr=new int[size];
        int idx=0;
        for(var p=head;p!=null;p=p.next)
            arr[idx++]=p.val;
        return construct(arr,0,size-1);
    } 
    public TreeNode construct(int[] nums, int lo, int hi){
        if(lo>hi)
            return null;
        int mid=(lo+hi)/2;
        return (new TreeNode(nums[mid],construct(nums,lo,mid-1),construct(nums,mid+1,hi)));
    }
}
        