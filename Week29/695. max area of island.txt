class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        //similar to lc200:number of islands
        int m=grid.length,n=grid[0].length;
        int ans=0;
        boolean[][] vis=new boolean[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]==false && grid[i][j]==1)
                    ans=Math.max(ans,dfs(grid,i,j,vis));
            }
        }
        return ans;
    }
    
    public int dfs(int[][] grid, int row, int col, boolean[][] vis){
        // if(grid[row][col]==0 || vis[row][col]==true)
        //     return 0;
        // if(row<0 || col<0 || row>=grid.length || col>=grid[0].length)
        //     return 0;
        
        vis[row][col]=true;
        int area=1;
        if(row>0 && vis[row-1][col]==false && grid[row-1][col]==1)
            area+=dfs(grid,row-1,col,vis);
        if(row<grid.length-1 && vis[row+1][col]==false && grid[row+1][col]==1)
            area+=dfs(grid,row+1,col,vis);
        if(col>0 && vis[row][col-1]==false && grid[row][col-1]==1)
            area+=dfs(grid,row,col-1,vis);
        if(col<grid[0].length-1 && vis[row][col+1]==false && grid[row][col+1]==1)
            area+=dfs(grid,row,col+1,vis);
        
        return area;
    }
    
    
    
    //bfs giving tle
    // public int bfs(int[][] grid, int row, int col, boolean[][] vis){ //the function will traverse using bfs and also return the area of traversed area
    //     if(row<0 || row>=grid.length || col<0 || col>=grid[0].length)
    //         return 0;
    //     Queue<Pair> q=new ArrayDeque<>();
    //     q.offer(new Pair(row,col));
    //     int area=0;
    //     while(!q.isEmpty()){
    //         Pair p=q.poll();
    //         int r=p.x,c=p.y;
    //         if(vis[r][c]==false) //this is imp. cuz of duplicacy(same pair getting added twice. without it, this case would give wrong answer: [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]])
    //         area++;
    //         vis[r][c]=true;
    //         if(r>0 && vis[r-1][c]==false && grid[r-1][c]==1)
    //             q.add(new Pair(r-1,c));
    //         if(r<grid.length-1 && vis[r+1][c]==false && grid[r+1][c]==1)
    //             q.add(new Pair(r+1,c));
    //         if(c>0 && vis[r][c-1]==false && grid[r][c-1]==1)
    //             q.add(new Pair(r,c-1));
    //         if(c<grid[0].length-1 && vis[r][c+1]==false && grid[r][c+1]==1)
    //             q.add(new Pair(r,c+1));
    //     }
    //     return area;
    // }
    
    private class Pair{
        int x,y;
        Pair(){}
        Pair(int r, int c){
            this.x=r;
            this.y=c;
        }
    }
}