class Solution {
    public int findJudge(int n, int[][] trust) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<=n;i++)
            adj.add(new ArrayList<>());
        
        for(int[] edge:trust)
            adj.get(edge[0]).add(edge[1]);
        
        int candidate=-1;
        //first check the person who doesn't trust anyone
        for(int i=1;i<=n;i++){
            if(adj.get(i).isEmpty()){
                candidate=i;
                break;
            }
        }
        
        //now also check if that person is trusted by everyone excluding himself
        boolean valid=true;
        for(int i=1;i<=n;i++){
            if(!adj.get(i).contains(candidate) && i!=candidate){
                valid=false;
                break;
            }
        }
        if(valid)
            return candidate;
        return -1;
    }
    
    // public void dfs(int node, List<List<Integer>> adj, boolean[] vis, boolean[] trusts){
    //     for(Integer nbr:adj.get(node)){
    //         if(vis[nbr]==false)
    //             dfs(nbr,adj,vis,trusts);
    //     }
    // }
}