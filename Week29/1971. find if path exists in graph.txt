class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
            adj.add(new ArrayList<>());
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        // //let's try bfs first
        // boolean[] vis=new boolean[n];
        // Queue<Integer> q=new ArrayDeque<>();
        // q.add(source);
        // vis[source]=true;
        // while(!q.isEmpty()){
        //     Integer node=q.poll();
        //     // System.out.println(node);
        //     if(node==destination)
        //         return true;
        //     vis[node]=true;
        //     Integer k=adj.get(node).size();
        //     for(int j=0;j<k;j++){
        //         if(vis[adj.get(node).get(j)]==false)
        //             q.offer(adj.get(node).get(j));
        //     }            
        // }
        // return false;
        
        
        
//         //now let's try dfs:
//         boolean[] vis=new boolean[n];
//         vis[source]=true;
//         return dfs(source,adj,vis,destination);
//     }
    
//     public boolean dfs(int node, List<List<Integer>> adj, boolean[] vis, int dest){
//         if(node==dest)
//             return true;
//         vis[node]=true;
//         for(Integer nbr:adj.get(node)){ //nbr:neighbour
//             if(vis[nbr]==false){
//                 if(dfs(nbr,adj,vis,dest))
//                     return true;
//             }
//         }
//         return false;
//     }
// }






