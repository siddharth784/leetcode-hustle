I did the question 1387 on leetcode and I found out a blunder in my code.

Here is the code: 
class Solution {
    public int getKth(int lo, int hi, int k) {
        int[] powers=new int[hi-lo+1];
        HashMap<Integer,Integer> power=new HashMap<>();
        int idx=0;
        for(int i=lo;i<=hi;i++){
            int temppower=nosteps(i);
            // System.out.println(temppower);
            power.put(temppower,i);
            powers[idx]=temppower;
            idx++;
        }
        Arrays.sort(powers);
        // System.out.println("the sorted array powers is: ")
        // System.out.println(power.get(powers[777]));
        int[] sortedacctopowers=new int[powers.length];
        for(int i=0;i<powers.length;i++)
            sortedacctopowers[i]=power.get(powers[i]);
        for(int i=0;i<powers.length;i++)
            System.out.println(sortedacctopowers[i]+"with power"+powers[i]);
        return sortedacctopowers[k-1];
    }
        
    
    int nosteps(int i){
        if(i==1)
            return 0;
        if(i%2==0)
            return (1+nosteps(i/2));
        if(i%2==1)
            return (1+nosteps(3*i+1));
        return 0;
    }
}

Note that in hashmap I am putting power and its root value from the range. The issue is, there are going to be repeating powers. so the hashmap is going to store only the last/biggest number from range against that repetitive power value. Which is problematic. Long story short key in hashmap should be unique while power isnt unique in the above code