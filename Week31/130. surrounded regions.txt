class Solution {
    public void solve(char[][] board) {
        int m=board.length,n=board[0].length;
        boolean[][] valid=new boolean[m][n];
        for(boolean[] arr:valid)
        Arrays.fill(arr,true);
        
        boolean[][] vis=new boolean[m][n];
        for(int i=0;i<m;i++){
            if(board[i][0]=='O' && vis[i][0]==false)
                dfs(i,0,board,vis,valid);
            if(board[i][n-1]=='O' && vis[i][n-1]==false)
                dfs(i,n-1,board,vis,valid);
        }
        for(int j=0;j<n;j++){
            if(board[0][j]=='O' && vis[0][j]==false)
                dfs(0,j,board,vis,valid);
            if(board[m-1][j]=='O' && vis[m-1][j]==false)
                dfs(m-1,j,board,vis,valid);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='O' && valid[i][j])
                    board[i][j]='X';
            }
        }
    }
    
    public void dfs(int row, int col, char[][] board,boolean[][] vis, boolean[][] valid){ //mark the boundary pe present O's aur unse connected O's ko as false in valid array
        if(vis[row][col])
            return;
        vis[row][col]=true;
        valid[row][col]=false;
        if(row>0 && board[row-1][col]=='O')
            dfs(row-1,col,board,vis,valid);
        if(row<board.length-1 && board[row+1][col]=='O')
            dfs(row+1,col,board,vis,valid);
        if(col<board[0].length-1 && board[row][col+1]=='O')
            dfs(row,col+1,board,vis,valid);
        if(col>0 && board[row][col-1]=='O')
            dfs(row,col-1,board,vis,valid);        
    }
}


