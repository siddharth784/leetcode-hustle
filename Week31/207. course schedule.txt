class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<numCourses;i++)
            adj.add(new ArrayList<>());
        int[] indegree=new int[numCourses];
        for(int[] edge:prerequisites){
            indegree[edge[0]]++;
            adj.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> q=new ArrayDeque<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0)
                q.add(i);
        }
        int finished=0;
        while(!q.isEmpty()){
            int node=q.poll();
            finished++;
            for(int nbr:adj.get(node)){
                indegree[nbr]--;
                if(indegree[nbr]==0)
                    q.add(nbr);
            }
        }
        return finished==numCourses;
    }
}