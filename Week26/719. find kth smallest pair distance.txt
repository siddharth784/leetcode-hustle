class Solution {
    public int smallestDistancePair(int[] nums, int k) {
// SMART BINARY SEARCH SOLUTION. THIS QUESTION IS OF THE SAME TYPE AS LC378 AND LC 668. HERE WE WILL SORT NUMS[]. THEN  WE WILL FIND LO,HI. AND BY BINARY SEARCH, WE WILL FIND MID AND THEN CHECK THE RANK OF THAT MID BY FINDING HOW MANY PAIRS IN THE ARRAY HAVE A DISTANCE <=MID
        Arrays.sort(nums);
        int n=nums.length;
        int lo=Integer.MAX_VALUE,hi=nums[n-1]-nums[0];
        for(int i=0;i<n-1;i++)
            lo=Math.min(lo,nums[i+1]-nums[i]);
        while(lo<hi){
            int mid=lo+(hi-lo)/2;
            int rank=0;
            int j=1;
            for(int i=0;i<n;i++){
                while(j<n && nums[j]-nums[i]<=mid)
                    j++;
                rank+=(j-i-1);
            }
            
            if(rank<k)
                lo=mid+1;
            else
                hi=mid;            
        }
        return  lo;
    }
}
        
        
        
// SIMPLE BRAIN TLE SOLUTION:        
//         Queue<Integer> pq=new PriorityQueue<>();
//         for(int i=0;i<nums.length;i++){
//             for(int j=i+1;j<nums.length;j++)
//                 pq.offer(Math.abs(nums[j]-nums[i]));
//         }
//         while(k-->1)
//             pq.poll();
//         return pq.peek();
//     }
// }