class Solution {
    public int firstMissingPositive(int[] arr) {
        //SUMIT SIR'S O(N) TIME AND O(K) SPACE APPROACH:
        int n=arr.length;
        for(int i=0;i<n;i++){
            if(arr[i]<=0)
                arr[i]=n+1;
        }
        for(int i=0;i<n;i++){
            int val=Math.abs(arr[i]);   //math.abs cuz it's possible that an element of arr has become -ve cuz we updated it. so we should instead weed out on the basis of element being greater than n like. dry run without math.abs and then see for yourself
            if(val<=n && arr[val-1]>0){
                arr[val-1]=-arr[val-1];
            }
        }
        for(int i=0;i<n;i++){
            if(arr[i]>0)
                return i+1;
        }
        return n+1;
    }
}
        
//         // SUMIT SIR'S O(n) BUT EXTRA SPACE O(n) APPROACH:
//         int n=arr.length;
//         boolean[] check=new boolean[n+1];
//         check[0]=true;
//         for(int i:arr){
//             if(i>0&&i<=n)
//                 check[i]=true;
//         }
//         for(int i=0;i<check.length;i++){
//             if(!check[i])
//                 return i;
//         }
//         return n+1;
//     }
// }
//         // FUNCTIONAL MINE PRIORITY QUEUE APPROACH:
//         Queue<Integer> pq=new PriorityQueue<>();
//         for(int i:arr)
//             pq.offer(i);
//         int num=0;
//         int hold=0;
//         while(!pq.isEmpty()){
//             int i=pq.poll();
//             if(i>0 && i!=hold){
//                 num++;
//                 if(i!=num)
//                     return num;
//                 hold=i;
//             }
//         }
//         return hold+1;
//     }
// }
        
//         // FUNCTIONAL MINE TREEMAP APPROACH O(LOG N) AND EXTRA SPACE:
//         Map<Integer,Boolean> tm=new TreeMap<>();
//         for(int i:arr)
//             tm.put(i,true);
//         int num=0;
//         int hold=0;  //initialising hold with 0 is essential, for cases like arr[]=[-5] where hold won't get updated at all so 1 is supposed to be returned.
//         for(int i:tm.keySet()){
//             if(i>0){
//                 num++;
//                 if(i!=num)
//                     return num;
//                 hold=i;
//             }
//         }
//         return hold+1;
//     }
// }
//         //DEAD WRONG  APPROACH:
//         Arrays.sort(arr);
//         for(int i=0;i<arr.length-1;i++){
//             if(arr[i]>=0){
//                 if(arr[i+1]!=arr[i]+1)
//                     return arr[i+1];
//             }
//         }
//         return arr[arr.length-1]+1;
//     }
// }
