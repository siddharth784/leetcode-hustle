class Solution {
    
//     // SUCCESS BEST DP APPROACH
//     public int uniquePathsWithObstacles(int[][] obstacleGrid){
//         int m=obstacleGrid.length,n=obstacleGrid[0].length;
//         int[][] dp=new int[m][n];
        
//         for(int i=m-1;i>=0;i--){
//             for(int j=n-1;j>=0;j--){
//                 if(obstacleGrid[i][j]==1)
//                     dp[i][j]=0;
//                 else if(i==m-1 && j==n-1)
//                     dp[i][j]=1;
//                 else{
//                     if(i==m-1)
//                         dp[i][j]=dp[i][j+1];
//                     else if(j==n-1)
//                         dp[i][j]=dp[i+1][j];
//                     else
//                         dp[i][j]=dp[i+1][j]+dp[i][j+1];
//                 }
//             }
//         }
//         return dp[0][0];
//     }
// }
    
    
//     // SUCCEEDED MEMOIZATION DISCUSS APPROACH:
//     public int uniquePathsWithObstacles(int[][] obstacleGrid){
//         int[][] memo=new int[obstacleGrid.length][obstacleGrid[0].length];
//         return memoization(obstacleGrid,0,0,memo);
//     }
//     public int memoization(int[][] grid, int row, int col, int[][] memo){
//         if(row>=grid.length||col>=grid[0].length||grid[row][col]==1)
//             return 0;
//         if(row==grid.length-1 && col==grid[0].length-1)
//             return memo[row][col]=1;
//         if(memo[row][col]!=0)
//             return memo[row][col];
//         memo[row][col]=memoization(grid,row+1,col,memo)+memoization(grid,row,col+1,memo);       
//         return memo[row][col];
//     }
// }
    
    
//     // FAILED TLE MEMOIZATION MINE APPROACH:
//     int paths=0;
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         int m=obstacleGrid.length,n=obstacleGrid[0].length;
//         int[][] memo=new int[m][n];
//         traverseGrid(obstacleGrid,0,0,memo);
//         return paths;
//     }
//     public void traverseGrid(int[][] grid, int row, int col, int[][] memo){
//         if(row==m-1 && col==n-1 && grid[row][col]!=1)
//             paths++;
//         if(row>=m||col>=n)
//             return;
//         if(memo[row][col]==-1)
//             return;
//         if(grid[row][col]==1||grid[row][col]==2){
//             memo[row][col]=-1;
//             return;
//         }
//         else{
//             grid[row][col]=2;
//             traverseGrid(grid,row+1,col,memo);
//             traverseGrid(grid,row,col+1,memo);
//             grid[row][col]=0;
//         }
//     }
// }