class Solution {
    public int countPrimes(int n){
        boolean[] isPrime=new boolean[n];
        Arrays.fill(isPrime,true);
        
        for(int i=2;i*i<=n;i++){
            if(isPrime[i]==false)   // meaning it's already been marked, and is composite
                continue;
            for(int j=i*i;j<n;j+=i)
                isPrime[j]=false;            
        }
        
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime[i])
                count++;
        }
        return count;
    }
}
// //  MY FOLLOWING APPROACH IS GOOD, BUT NOT THE MOOOST EFFICIENT, ESPECIALLY WHEN THERE IS A WHOLE BIG CONCEPT OF SIEVE OF ERATOSTHENES TO SOLVE SUCH PROBLEM (LOOK AT ALL HINTS GIVEN)
    
//     public int countPrimes(int n) {
//         int count=0;
//         for(int i=2;i<n;i++){
//             if(i<5){
//                 if(i==2||i==3)
//                     count++;
//             }
//             else if(i%6==1 || i%6==5){
//                 if(isPrime(i))
//                     count++;
//             }
//         }
//         return count;
//     }
    
//     public boolean isPrime(int num){
//         for(int i=2;i*i<=num;i++){
//             if(num%i==0)
//                 return false;
//         }
//         return true;
//     }
// }