/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    // THIS QUESTION CAN BE A BIT OVERWHELMING, BUT YOU CAN ALWAYS WATCH 19TH MAY LVL2 CLASS BY SUMEET SIR FROM 2:00:00 FOR EXPLANATION
    
    
    public void recoverTree(TreeNode root) {
        // make use of the fact that inorder of bst is sorted. so wherever we spot any discrepancy, we note that node.
        // now to do inorder traversal, we are using here morris traversal to solve in just O(1)
        TreeNode curr=root;
        TreeNode prev=null; //doing prev null and curr root resp. is v important
        TreeNode n1=null;
        TreeNode n2=null;
        // jaha hum morris inorder traversal mei print krte the, wahan curr update krenge, aur prev bhi. aur agar sorted nhi hai kahi pe (i.e. prev isn't less than curr), toh waha hum store kr lenge prev. and 2nd time curr.
        while(curr!=null){
            if(prev!=null && prev.val>curr.val){
                if(n1==null){   //n1 being null indicates that this is the first discrepancy/non sorted pair so we need to assign both n1 and n2
                    n1=prev;
                    n2=curr;
                }
                else    //this is the second unsorted pair, which means leave n1 as it is, and assign curr(smaller number of 2nd unsorted pair) to n2
                    n2=curr;
            }
            
            if(curr.left==null){
                prev=curr;
                curr=curr.right;
            }
            else{
                TreeNode iop=curr.left;
                while(iop.right!=null && iop.right!=curr)
                    iop=iop.right;
                
                if(iop.right==null){
                    iop.right=curr;
                    curr=curr.left;
                }
                else if(iop.right==curr){
                    
                    if(prev!=null && curr.val<prev.val){
                        if(n1==null){
                            n1=prev;
                            n2=curr;
                        }
                        else
                            n2=curr;
                    }
                    
                    iop.right=null;
                    prev=curr;
                    curr=curr.right;
                }
            }
        }
        int temp=n1.val;
        n1.val=n2.val;
        n2.val=temp;
    }
}


