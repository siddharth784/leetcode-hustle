class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        backtrack(nums,0,new ArrayList<>());
        return ans;
    }
    public void backtrack(int[] nums, int idx, List<Integer> al){
        if(idx==nums.length){
            // Collections.sort(al); //sorting them here permanently sorts them. and so when this function pops off the stack and the last element's to be removed, the wrong index ka element gets removed
            List<Integer> clone=new ArrayList<>(al);
            Collections.sort(clone);
            if(!ans.contains(clone))
            ans.add(new ArrayList<>(clone));
            return;
        }
        al.add(nums[idx]);
        backtrack(nums,idx+1,al);
        al.remove(al.size()-1);
        backtrack(nums,idx+1,al);
    }
}