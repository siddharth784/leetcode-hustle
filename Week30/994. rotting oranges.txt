class Solution {
    public int orangesRotting(int[][] grid) {
        //bfs
        int m=grid.length,n=grid[0].length;
        boolean[][] visited=new boolean[m][n];
        Queue<Pair> q=new ArrayDeque<>();
        // bfs(grid,visited);
        boolean rotpresent=false; //will indicate if any rotten orange was present so that one minute is finally deducted from the answer which was earlier added
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                    rotpresent=true;
                }
            }
        }
        int time=0;
        while(!q.isEmpty()){
            int k=q.size();
            for(int i=1;i<=k;i++){
                Pair p=q.poll();
                int x=p.x,y=p.y;
                grid[x][y]=2;
                visited[x][y]=true;
                if(x>0 && grid[x-1][y]==1 && visited[x-1][y]==false){
                    q.add(new Pair(x-1,y));
                    visited[x-1][y]=true;
                }
                if(y>0 && grid[x][y-1]==1 && visited[x][y-1]==false){
                    q.add(new Pair(x,y-1));
                    visited[x][y-1]=true;
                }
                if(x<grid.length-1 && grid[x+1][y]==1 && visited[x+1][y]==false){
                    q.add(new Pair(x+1,y));
                    visited[x+1][y]=true;
                }
                if(y<grid[0].length-1 && grid[x][y+1]==1 && visited[x][y+1]==false){
                    q.add(new Pair(x,y+1));
                    visited[x][y+1]=true;
                }
            }
            time++;
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                    return -1;
            }
        }
        return time-(rotpresent?1:0);
    }
    
    private class Pair{
        int x,y;
        Pair(){}
        Pair(int x, int y){
            this.x=x;
            this.y=y;
        }
    }
}