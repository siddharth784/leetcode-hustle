/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null)
            return null;
//       MY STANDARD QUEUE LOT APPROACH WITH TERRIBLE TIME COMPLEXITY
        Queue<Node> q=new ArrayDeque<>();
        q.add(root);
        while(q.isEmpty()==false){
            int count=q.size();
            Stack<Node> st=new Stack<>();
            for(int i=1;i<=count;i++){
                Node node=q.remove();
                if(node.left!=null)
                    q.add(node.left);
                if(node.right!=null)
                    q.add(node.right);
                if(st.empty()==false)
                    st.pop().next=node;
                st.push(node);                
            }
            st.pop().next=null;
        }
        return root;
    }
}