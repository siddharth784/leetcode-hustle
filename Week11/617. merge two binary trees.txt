/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
//	SIMPLE APPROACH:
//	if(root1==null && root2==null)
//	return null;
//	if(root1==null)
//	return root2;
//	if(root2==null)
//	return root1;
//	else
//	return (new TreeNode(root1.val+root2.val),mergeTrees(root1.left,root2.left),mergeTrees(root1.right,root2.right));
       return construct(root1,root2);
    }
    public TreeNode construct(TreeNode node1, TreeNode node2){
        if(node1==null && node2==null)
            return null;
        if(node1==null){
            // TreeNode resultnode=new TreeNode(node2.val);
            // resultnode.left=construct(null,node2.left);
            // resultnode.right=construct(null,node2.right);
            // return resultnode;
            return node2;
        }
        if(node2==null){
            // TreeNode resultnode=new TreeNode(node1.val);
            // resultnode.left=construct(node1.left,null);
            // resultnode.right=construct(node1.right,null);
            // return resultnode;
            return node1;
        }
        else{
            return (new TreeNode(node1.val+node2.val,construct(node1.left,node2.left),construct(node1.right,node2.right)));
        }
        
    }
}