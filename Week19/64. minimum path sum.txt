class Solution {
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] dp=new int[m][n];
        dp[0][0]=grid[0][0];
        for(int row=0,col=1;col<n;col++)
            dp[row][col]=dp[row][col-1]+grid[row][col];
        for(int row=1,col=0;row<m;row++)
            dp[row][col]=dp[row-1][col]+grid[row][col];
        
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=grid[i][j]+Math.min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
}
// solved it myself after just watching 1 video of 2D D.P. of Striver
        
//         // let's try this using dp
//         int m=grid.length,n=grid[0].length;
//         int[][] dp=new int[grid.length][grid[0].length];
//         for(int i=m-1;i>=0;i--){
//             for(int j=n-1;j>=0;j--){
//         // for(int i=0;i<m;i++){
//             // for(int j=0;j<n;j++){
//                 if(i==m-1 && j==n-1)
//                     dp[i][j]=grid[i][j];
//                 else{
//                     int minsum=Integer.MAX_VALUE;
//                     if(i>0)
//                         minsum=Math.min(minsum,dp[i-1][j]);
//                     if(j>0)
//                         minsum=Math.min(minsum,dp[i][j-1]);
//                     if(i<m-1)
//                         minsum=Math.min(minsum,dp[i+1][j]);
//                     if(j<n-1)
//                         minsum=Math.min(minsum,dp[i][j+1]);
//                     dp[i][j]=grid[i][j]+minsum;
//                 }
//             }
//         }
//         for(int i=0;i<dp.length;i++){
//             for(int j=0;j<dp[0].length;j++)
//                 System.out.print(dp[i][j]);
//             System.out.println();
//         }
//         return dp[0][0];
//     }
// }