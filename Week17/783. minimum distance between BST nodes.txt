/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // for all root subtrees, find the maximum value in the root.left subtree, find minimum value in root.right subtree then update mindiff with differences
    int mindiff=Integer.MAX_VALUE;
    public int minDiffInBST(TreeNode root) {
        if(root==null)
            return 0;
        
        if(root.left!=null)
            mindiff=Math.min(mindiff,root.val-maxsubtree(root.left));
        if(root.right!=null)
            mindiff=Math.min(mindiff,minsubtree(root.right)-root.val);
        minDiffInBST(root.left);
        minDiffInBST(root.right);
        return mindiff;
    }
    
    public int minsubtree(TreeNode root){
        if(root.left!=null)
            return minsubtree(root.left);
        return root.val;
    }
    
    public int maxsubtree(TreeNode root){
        if(root.right!=null)
            return maxsubtree(root.right);
        return root.val;
    }
}


