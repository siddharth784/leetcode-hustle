/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> hm=new HashMap<>();    
    public int[] findMode(TreeNode root) {
        traverse(root);
        List<Integer> li=new ArrayList<>();
        int maxfreq=0;
        for(int key:hm.keySet()){
            int tempfreq=hm.get(key);
            if(tempfreq>maxfreq){
                li.clear();
                li.add(key);
                maxfreq=tempfreq;
            }
            else if(tempfreq==maxfreq && li.contains(key)==false)
                li.add(key);
        }
        int[] arr=new int[li.size()];
        for(int i=0;i<arr.length;i++)
            arr[i]=li.get(i);
        return arr;
    }
    public void traverse(TreeNode root){
        if(root==null)
            return;
        hm.put(root.val,hm.getOrDefault(root.val,0)+1);
        traverse(root.left);
        traverse(root.right);
    }
}