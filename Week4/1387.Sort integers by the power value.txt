class Solution {
    public int getKth(int lo, int hi, int k) {
        PriorityQueue<Item> maxHeap = new PriorityQueue<Item>((a, b) -> (a.power == b.power) ? (b.num - a.num) : (b.power - a.power));
        int idx=0;
        for(int i=lo;i<=hi;i++){
            int temppower=nosteps(i);
            Item temp=new Item(i,temppower);
            maxHeap.add(temp);
            if(maxHeap.size()>k)
                maxHeap.remove();
        }
        return maxHeap.remove().num;
    }
        
    
    int nosteps(int i){
        if(i==1)
            return 0;
        if(i%2==0)
            return (1+nosteps(i/2));
        if(i%2==1)
            return (1+nosteps(3*i+1));
        return 0;
    }
}

class Item{
    int num;
    int power;
    public Item(int num, int power){    //(constructor)
        this.num=num;
        this.power=power;
    } 
}