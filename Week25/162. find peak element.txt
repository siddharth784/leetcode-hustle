class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length==1)
            return 0;
        if(nums[0]>nums[1])
            return 0;
        int n=nums.length;
        if(nums[n-1]>nums[n-2])
            return n-1;
        int start=1,end=nums.length-2;
       while(start <= end) {
            int mid = start + (end - start)/2;
            if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) return mid;
            else if(nums[mid] < nums[mid-1]) end = mid - 1;
            else if(nums[mid] < nums[mid+1]) start = mid + 1;
        }
        
        return start;
    }
}
        
//             int left=-(Integer.MIN_VALUE);
//             int right=-(Integer.MIN_VALUE);
//             if(mid>0)
//                 left=nums[mid-1];
//             if(mid<nums.length-1)
//                 right=nums[mid+1];
            
//             if(left<nums[mid] && right>nums[mid+1])
//                 return mid; //mid is the peek (case 2)
//             else if(nums[mid]<left) 
//                 hi=mid-1; // downward slope and search space left side ( case 1)
// 	        else if(nums[mid]<right) 
//                 lo=mid+1; // upward slope and search space right side ( case 3 )
//         }
//         return 0;
//     }
// }