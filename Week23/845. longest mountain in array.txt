class Solution {
    public int longestMountain(int[] arr) {
        // SOLVED MYSELF
        int n=arr.length;
        if(n<3)
            return 0;
        // make dp array for longest increasing subarray ki lengths, then for longest decreasing ones from the right and then find optimum intersection point, by traversing, adding left & right subarray lengths and checking if it's greatest
        int[] dp1=new int[n]; //dp1[idx] denotes length of longest increasing subarray from anywhere in the left of idx till idx(inclusive)
        int[] dp2=new int[n];
        
        //setting dp1
        for(int i=0;i<n;i++){
            if(i==0)
                dp1[i]=1;
            else{
                if(arr[i-1]<arr[i])
                    dp1[i]=dp1[i-1]+1;
                else
                    dp1[i]=1;
            }
        }
        
        //setting dp2
        for(int i=n-1;i>=0;i--){
            if(i==n-1)
                dp2[i]=1;
            else{
                if(arr[i]>arr[i+1])
                    dp2[i]=dp2[i+1]+1;
                else
                    dp2[i]=1;
            }
        }
        int maxmountain=0;
        for(int i=0;i<n;i++){
            if(dp1[i]>1 && dp2[i]>1) //to ensure that cases like [2,2,2] don't return 1 but 0. fundamentally what this does is, ensure that the left slope subarray & right slope subarray both are greater than 1 element, cuz for example dp1[i] means that left slope mein akela arr[i] hi hai. same way for right slope/dp2[i].
// Which contradicts given condition that not only arr[0] < arr[1] < ... < arr[i - 1] <arr[i]>arr[i] > arr[i + 1] > ... > arr[arr.length - 1] but also, 0<i<arr.length-1.  KEHNE KA MATLAB HAI KI LEFT INCREASING SUBARRAY BANANE  MEIN ARR[i] KO CHHODKE ATLEAST EK AUR ELEMENT KA HATH HONE CHAHIYE FROM ITS LEFT. AND SIMILAR FOR HAVING THE RIGHT DECREASING SUBARRAY
                
            maxmountain=Math.max(maxmountain,dp1[i]+dp2[i]-1);
        }
        return maxmountain;
    }
}
            

        
        